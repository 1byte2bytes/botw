#include "KingSystem/ActorSystem/actInfoCommon.h"
#include "KingSystem/ActorSystem/actInfoData.h"

// DO NOT EDIT. This file is automatically generated by actInfoCommon.py.

namespace ksys::act {

bool getSystemIsGetItemSelf(InfoData* data, const char* actor) {
    return data->getBool(actor, "systemIsGetItemSelf");
}

bool getSystemIsGetItemSelf(const al::ByamlIter& iter) {
    return InfoData::getBoolByKey(iter, "systemIsGetItemSelf");
}

int getGeneralLife(InfoData* data, const char* actor) {
    return data->getInt(actor, "generalLife", 100);
}

int getGeneralLife(const al::ByamlIter& iter) {
    return InfoData::getIntByKey(iter, "generalLife", 100);
}

int getEnemyRank(InfoData* data, const char* actor) {
    return data->getInt(actor, "enemyRank");
}

int getEnemyRank(const al::ByamlIter& iter) {
    return InfoData::getIntByKey(iter, "enemyRank");
}

int getAttackPower(InfoData* data, const char* actor) {
    return data->getInt(actor, "attackPower");
}

int getAttackPower(const al::ByamlIter& iter) {
    return InfoData::getIntByKey(iter, "attackPower");
}

int getWeaponCommonGuardPower(InfoData* data, const char* actor) {
    return data->getInt(actor, "weaponCommonGuardPower");
}

int getWeaponCommonGuardPower(const al::ByamlIter& iter) {
    return InfoData::getIntByKey(iter, "weaponCommonGuardPower");
}

float getWeaponCommonSharpWeaponPer(InfoData* data, const char* actor) {
    return data->getFloat(actor, "weaponCommonSharpWeaponPer", 10.0);
}

float getWeaponCommonSharpWeaponPer(const al::ByamlIter& iter) {
    return InfoData::getFloatByKey(iter, "weaponCommonSharpWeaponPer", 10.0);
}

int getWeaponCommonSharpWeaponAddAtkMin(InfoData* data, const char* actor) {
    return data->getInt(actor, "weaponCommonSharpWeaponAddAtkMin");
}

int getWeaponCommonSharpWeaponAddAtkMin(const al::ByamlIter& iter) {
    return InfoData::getIntByKey(iter, "weaponCommonSharpWeaponAddAtkMin");
}

int getWeaponCommonSharpWeaponAddAtkMax(InfoData* data, const char* actor) {
    return data->getInt(actor, "weaponCommonSharpWeaponAddAtkMax");
}

int getWeaponCommonSharpWeaponAddAtkMax(const al::ByamlIter& iter) {
    return InfoData::getIntByKey(iter, "weaponCommonSharpWeaponAddAtkMax");
}

int getWeaponCommonSharpWeaponAddLifeMin(InfoData* data, const char* actor) {
    return data->getInt(actor, "weaponCommonSharpWeaponAddLifeMin");
}

int getWeaponCommonSharpWeaponAddLifeMin(const al::ByamlIter& iter) {
    return InfoData::getIntByKey(iter, "weaponCommonSharpWeaponAddLifeMin");
}

int getWeaponCommonSharpWeaponAddLifeMax(InfoData* data, const char* actor) {
    return data->getInt(actor, "weaponCommonSharpWeaponAddLifeMax");
}

int getWeaponCommonSharpWeaponAddLifeMax(const al::ByamlIter& iter) {
    return InfoData::getIntByKey(iter, "weaponCommonSharpWeaponAddLifeMax");
}

bool getWeaponCommonSharpWeaponAddCrit(InfoData* data, const char* actor) {
    return data->getBool(actor, "weaponCommonSharpWeaponAddCrit");
}

bool getWeaponCommonSharpWeaponAddCrit(const al::ByamlIter& iter) {
    return InfoData::getBoolByKey(iter, "weaponCommonSharpWeaponAddCrit");
}

int getWeaponCommonSharpWeaponAddGuardMin(InfoData* data, const char* actor) {
    return data->getInt(actor, "weaponCommonSharpWeaponAddGuardMin");
}

int getWeaponCommonSharpWeaponAddGuardMin(const al::ByamlIter& iter) {
    return InfoData::getIntByKey(iter, "weaponCommonSharpWeaponAddGuardMin");
}

int getWeaponCommonSharpWeaponAddGuardMax(InfoData* data, const char* actor) {
    return data->getInt(actor, "weaponCommonSharpWeaponAddGuardMax");
}

int getWeaponCommonSharpWeaponAddGuardMax(const al::ByamlIter& iter) {
    return InfoData::getIntByKey(iter, "weaponCommonSharpWeaponAddGuardMax");
}

int getWeaponCommonPoweredSharpAddAtkMin(InfoData* data, const char* actor) {
    return data->getInt(actor, "weaponCommonPoweredSharpAddAtkMin");
}

int getWeaponCommonPoweredSharpAddAtkMin(const al::ByamlIter& iter) {
    return InfoData::getIntByKey(iter, "weaponCommonPoweredSharpAddAtkMin");
}

int getWeaponCommonPoweredSharpAddAtkMax(InfoData* data, const char* actor) {
    return data->getInt(actor, "weaponCommonPoweredSharpAddAtkMax");
}

int getWeaponCommonPoweredSharpAddAtkMax(const al::ByamlIter& iter) {
    return InfoData::getIntByKey(iter, "weaponCommonPoweredSharpAddAtkMax");
}

int getWeaponCommonPoweredSharpAddLifeMin(InfoData* data, const char* actor) {
    return data->getInt(actor, "weaponCommonPoweredSharpAddLifeMin");
}

int getWeaponCommonPoweredSharpAddLifeMin(const al::ByamlIter& iter) {
    return InfoData::getIntByKey(iter, "weaponCommonPoweredSharpAddLifeMin");
}

int getWeaponCommonPoweredSharpAddLifeMax(InfoData* data, const char* actor) {
    return data->getInt(actor, "weaponCommonPoweredSharpAddLifeMax");
}

int getWeaponCommonPoweredSharpAddLifeMax(const al::ByamlIter& iter) {
    return InfoData::getIntByKey(iter, "weaponCommonPoweredSharpAddLifeMax");
}

int getWeaponCommonPoweredSharpWeaponAddGuardMin(InfoData* data, const char* actor) {
    return data->getInt(actor, "weaponCommonPoweredSharpWeaponAddGuardMin");
}

int getWeaponCommonPoweredSharpWeaponAddGuardMin(const al::ByamlIter& iter) {
    return InfoData::getIntByKey(iter, "weaponCommonPoweredSharpWeaponAddGuardMin");
}

int getWeaponCommonPoweredSharpWeaponAddGuardMax(InfoData* data, const char* actor) {
    return data->getInt(actor, "weaponCommonPoweredSharpWeaponAddGuardMax");
}

int getWeaponCommonPoweredSharpWeaponAddGuardMax(const al::ByamlIter& iter) {
    return InfoData::getIntByKey(iter, "weaponCommonPoweredSharpWeaponAddGuardMax");
}

float getWeaponCommonPoweredSharpAddThrowMin(InfoData* data, const char* actor) {
    return data->getFloat(actor, "weaponCommonPoweredSharpAddThrowMin", 1.0);
}

float getWeaponCommonPoweredSharpAddThrowMin(const al::ByamlIter& iter) {
    return InfoData::getFloatByKey(iter, "weaponCommonPoweredSharpAddThrowMin", 1.0);
}

float getWeaponCommonPoweredSharpAddThrowMax(InfoData* data, const char* actor) {
    return data->getFloat(actor, "weaponCommonPoweredSharpAddThrowMax", 1.0);
}

float getWeaponCommonPoweredSharpAddThrowMax(const al::ByamlIter& iter) {
    return InfoData::getFloatByKey(iter, "weaponCommonPoweredSharpAddThrowMax", 1.0);
}

bool getWeaponCommonPoweredSharpAddSpreadFire(InfoData* data, const char* actor) {
    return data->getBool(actor, "weaponCommonPoweredSharpAddSpreadFire");
}

bool getWeaponCommonPoweredSharpAddSpreadFire(const al::ByamlIter& iter) {
    return InfoData::getBoolByKey(iter, "weaponCommonPoweredSharpAddSpreadFire");
}

bool getWeaponCommonPoweredSharpAddZoomRapid(InfoData* data, const char* actor) {
    return data->getBool(actor, "weaponCommonPoweredSharpAddZoomRapid");
}

bool getWeaponCommonPoweredSharpAddZoomRapid(const al::ByamlIter& iter) {
    return InfoData::getBoolByKey(iter, "weaponCommonPoweredSharpAddZoomRapid");
}

float getWeaponCommonPoweredSharpAddRapidFireMin(InfoData* data, const char* actor) {
    return data->getFloat(actor, "weaponCommonPoweredSharpAddRapidFireMin", 1.0);
}

float getWeaponCommonPoweredSharpAddRapidFireMin(const al::ByamlIter& iter) {
    return InfoData::getFloatByKey(iter, "weaponCommonPoweredSharpAddRapidFireMin", 1.0);
}

float getWeaponCommonPoweredSharpAddRapidFireMax(InfoData* data, const char* actor) {
    return data->getFloat(actor, "weaponCommonPoweredSharpAddRapidFireMax", 1.0);
}

float getWeaponCommonPoweredSharpAddRapidFireMax(const al::ByamlIter& iter) {
    return InfoData::getFloatByKey(iter, "weaponCommonPoweredSharpAddRapidFireMax", 1.0);
}

bool getWeaponCommonPoweredSharpAddSurfMaster(InfoData* data, const char* actor) {
    return data->getBool(actor, "weaponCommonPoweredSharpAddSurfMaster");
}

bool getWeaponCommonPoweredSharpAddSurfMaster(const al::ByamlIter& iter) {
    return InfoData::getBoolByKey(iter, "weaponCommonPoweredSharpAddSurfMaster");
}

const char* getBowArrowName(InfoData* data, const char* actor) {
    return data->getString(actor, "bowArrowName");
}

const char* getBowArrowName(const al::ByamlIter& iter) {
    return InfoData::getStringByKey(iter, "bowArrowName");
}

bool getBowIsLeadShot(InfoData* data, const char* actor) {
    return data->getBool(actor, "bowIsLeadShot");
}

bool getBowIsLeadShot(const al::ByamlIter& iter) {
    return InfoData::getBoolByKey(iter, "bowIsLeadShot");
}

int getBowLeadShotNum(InfoData* data, const char* actor) {
    return data->getInt(actor, "bowLeadShotNum");
}

int getBowLeadShotNum(const al::ByamlIter& iter) {
    return InfoData::getIntByKey(iter, "bowLeadShotNum");
}

bool getBowIsRapidFire(InfoData* data, const char* actor) {
    return data->getBool(actor, "bowIsRapidFire");
}

bool getBowIsRapidFire(const al::ByamlIter& iter) {
    return InfoData::getBoolByKey(iter, "bowIsRapidFire");
}

int getBowRapidFireNum(InfoData* data, const char* actor) {
    return data->getInt(actor, "bowRapidFireNum");
}

int getBowRapidFireNum(const al::ByamlIter& iter) {
    return InfoData::getIntByKey(iter, "bowRapidFireNum");
}

int getMasterSwordTrueFormAttackPower(InfoData* data, const char* actor) {
    return data->getInt(actor, "masterSwordTrueFormAttackPower", -1);
}

int getMasterSwordTrueFormAttackPower(const al::ByamlIter& iter) {
    return InfoData::getIntByKey(iter, "masterSwordTrueFormAttackPower", -1);
}

float getMasterSwordSearchEvilDist(InfoData* data, const char* actor) {
    return data->getFloat(actor, "masterSwordSearchEvilDist", -1.0);
}

float getMasterSwordSearchEvilDist(const al::ByamlIter& iter) {
    return InfoData::getFloatByKey(iter, "masterSwordSearchEvilDist", -1.0);
}

const char* getMasterSwordSleepActorName(InfoData* data, const char* actor) {
    return data->getString(actor, "masterSwordSleepActorName");
}

const char* getMasterSwordSleepActorName(const al::ByamlIter& iter) {
    return InfoData::getStringByKey(iter, "masterSwordSleepActorName");
}

const char* getMasterSwordTrueFormActorName(InfoData* data, const char* actor) {
    return data->getString(actor, "masterSwordTrueFormActorName");
}

const char* getMasterSwordTrueFormActorName(const al::ByamlIter& iter) {
    return InfoData::getStringByKey(iter, "masterSwordTrueFormActorName");
}

const char* getArmorNextRankName(InfoData* data, const char* actor) {
    return data->getString(actor, "armorNextRankName");
}

const char* getArmorNextRankName(const al::ByamlIter& iter) {
    return InfoData::getStringByKey(iter, "armorNextRankName");
}

int getItemStainColor(InfoData* data, const char* actor) {
    return data->getInt(actor, "itemStainColor", -1);
}

int getItemStainColor(const al::ByamlIter& iter) {
    return InfoData::getIntByKey(iter, "itemStainColor", -1);
}

int getCureItemHitPointRecover(InfoData* data, const char* actor) {
    return data->getInt(actor, "cureItemHitPointRecover");
}

int getCureItemHitPointRecover(const al::ByamlIter& iter) {
    return InfoData::getIntByKey(iter, "cureItemHitPointRecover");
}

int getMonsterShopSellMamo(InfoData* data, const char* actor) {
    return data->getInt(actor, "monsterShopSellMamo");
}

int getMonsterShopSellMamo(const al::ByamlIter& iter) {
    return InfoData::getIntByKey(iter, "monsterShopSellMamo");
}


}  // namespace ksys::act
